<?php
namespace ThePermalinksCascade;

/**
 * @package The Permalinks Cascade
 * @copyright Copyright 2022 Luigi Cavalieri.
 * @license https://opensource.org/licenses/GPL-3.0 GPL v3.0
 *
 * @since 1.0
 */
final class RobotsDelegate {
    /**
     * @since 1.0
     * @var object
     */
    private $plugin;
    
    /**
     * @since 1.0
     * @var object
     */
    private $db;
    
    /**
     * @since 1.0
     * @var string
     */
    private $rules = '';
    
    
    /**
     * @since 1.0
     * @param object $plugin
     */
    public function __construct( $plugin ) {
        $this->plugin = $plugin;
        $this->db     = $plugin->db();
    }
    
    /**
     * Appends to $content the rules generated by the object.
     *
     * Called after WordPress has generated the default rules.
     *
     * @since 1.0
     *
     * @param string $content
     * @param string $site_is_public
     * @return string
     */
    public function &wpDidGenerateRobotsFileContent( $content, $site_is_public ) {
        if ( '0' !== $site_is_public ) {
            if ( $this->db->getOption( 'add_sitemap_url_to_robots' ) ) {
                $this->rules = "\nSitemap: " . $this->plugin->sitemapURL( 'sitemap' ) . "\n";
            }
            
            if ( $this->db->getOption( 'generate_disallow_rules' ) ) {
                $this->generateDisallowRules();
            }
            
            if ( $this->rules ) {
                $plugin_name = $this->plugin->name();
                $content    .= "\n\n# {$plugin_name} Start" . $this->rules . "# {$plugin_name} End\n";
            }
        }

        return $content;
    }
    
    /**
     * @since 1.0
     * @return bool
     */
    private function generateDisallowRules() {
        $post_types = get_post_types( array( 'public' => true ) );

        foreach ( $post_types as $post_type ) {
            if (! $this->plugin->isContentTypeIncluded( $post_type, 'sitemap' ) ) {
                unset( $post_types[$post_type] );
            }
        }

        if (! $post_types ) {
            return false;
        }
        
        $wpQuery        = new \WP_Query();
        $meta_key       = $this->db->metaKeyPrefix() . 'exclude_from_sitemap';
        $excluded_posts = $wpQuery->query(array(
            'meta_key'               => $meta_key,
            'order'                  => 'ASC',
            'orderby'                => 'name', 
            'post_status'            => 'publish',
            'post_type'              => $post_types,
            'ignore_sticky_posts'    => 1,
            'posts_per_page'         => -1,
            'update_post_meta_cache' => false,
            'update_post_term_cache' => false
        ));

        if (! $excluded_posts ) {
            return false;
        }

        $home_url_length = strlen( home_url() );
        $this->rules    .= "\nUser-agent: *\n";
        
        foreach ( $excluded_posts as $post ) {
            $this->rules .= 'Disallow: ';
            $this->rules .= substr( get_permalink( $post ), $home_url_length );
            $this->rules .= "\n";
        }

        return true;
    }
}